---

- name: generate pseudo-random password for the postgres replication user
  local_action: shell python -c "exec 'import os; print os.urandom(30).encode(\'base64\')[:${length}]'" | tee {{ playbook_dir }}/tmp/replication_user_password
  register: generated_replication_user_password
  changed_when: false

- name: read pseudo-random password for the postgres replication user if it exists
  local_action: command cat {{ playbook_dir }}/tmp/replication_user_password
  register: generated_replication_user_password
  changed_when: false

- name: create replication postgresql user
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{ postgresql_replication_user }}"
    password: "{{ postgresql_replication_user_password }}"
    role_attr_flags: LOGIN,REPLICATION
    state: "present"
    fail_on_user: no
  when: postgresql_replication and postgresql_replication_user is defined
